<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý cấu hình Environment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: system-ui, -apple-system, sans-serif;
        }
        .card {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .card-header {
            background-color: #343a40;
            color: white;
            border-bottom: 1px solid #dee2e6;
        }
        .form-control {
            border-radius: 4px;
            border: 1px solid #ced4da;
        }
        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        .btn {
            border-radius: 4px;
            font-weight: normal;
        }
        .config-item {
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
        }
        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
        }
        pre {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 15px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">
                            <i class="fas fa-cogs me-2"></i>
                            Quản lý cấu hình Environment
                        </h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- Alert messages -->
                        <div id="alertContainer"></div>
                        
                        <!-- Load/Save buttons -->
                        <div class="row mb-4">
                            <div class="col-md-4 mb-2">
                                <button type="button" class="btn btn-success w-100" onclick="loadConfig()">
                                    <i class="fas fa-download me-2"></i>
                                    Tải cấu hình
                                </button>
                            </div>
                            <div class="col-md-4 mb-2">
                                <button type="button" class="btn btn-primary w-100" onclick="saveConfig()">
                                    <i class="fas fa-save me-2"></i>
                                    Lưu cấu hình
                                </button>
                            </div>
                            <div class="col-md-4 mb-2">
                                <button type="button" class="btn btn-warning w-100" onclick="resetConfig()">
                                    <i class="fas fa-undo me-2"></i>
                                    Khôi phục mặc định
                                </button>
                            </div>
                        </div>

                        <!-- Configuration Form -->
                        <form id="configForm">
                            <div class="config-item">
                                <div class="mb-3">
                                    <label for="MESSAGE_WEBHOOK_URL" class="form-label">
                                        Message Webhook URL
                                    </label>
                                    <input type="url" class="form-control" id="MESSAGE_WEBHOOK_URL" name="MESSAGE_WEBHOOK_URL" 
                                           placeholder="http://localhost:3001/api/webhook">
                                    <small class="form-text text-muted">URL nhận thông báo khi có tin nhắn mới</small>
                                </div>
                            </div>

                            <div class="config-item">
                                <div class="mb-3">
                                    <label for="GROUP_EVENT_WEBHOOK_URL" class="form-label">
                                        Group Event Webhook URL
                                    </label>
                                    <input type="url" class="form-control" id="GROUP_EVENT_WEBHOOK_URL" name="GROUP_EVENT_WEBHOOK_URL" 
                                           placeholder="http://localhost:3001/api/webhook">
                                    <small class="form-text text-muted">URL nhận thông báo về sự kiện nhóm (tham gia, rời khỏi, v.v.)</small>
                                </div>
                            </div>

                            <div class="config-item">
                                <div class="mb-3">
                                    <label for="REACTION_WEBHOOK_URL" class="form-label">
                                        Reaction Webhook URL
                                    </label>
                                    <input type="url" class="form-control" id="REACTION_WEBHOOK_URL" name="REACTION_WEBHOOK_URL" 
                                           placeholder="http://localhost:3001/api/webhook">
                                    <small class="form-text text-muted">URL nhận thông báo về phản ứng tin nhắn</small>
                                </div>
                            </div>

                            <div class="config-item">
                                <div class="mb-3">
                                    <label for="LOGIN_CALLBACK_URL" class="form-label">
                                        Login Callback URL
                                    </label>
                                    <input type="url" class="form-control" id="LOGIN_CALLBACK_URL" name="LOGIN_CALLBACK_URL" 
                                           placeholder="http://localhost:3001/api/webhook">
                                    <small class="form-text text-muted">URL callback cho quá trình đăng nhập</small>
                                </div>
                            </div>
                        </form>

                        <!-- JSON Preview -->
                        <div class="mt-4">
                            <h5>Xem trước JSON:</h5>
                            <pre id="jsonPreview" style="max-height: 200px; overflow-y: auto;"></pre>
                        </div>

                        <!-- Back button -->
                        <div class="mt-4">
                            <a href="/" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Quay lại trang chủ
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Load configuration on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadConfig();
            updateJsonPreview();
            
            // Add event listeners to form inputs to update JSON preview
            const inputs = document.querySelectorAll('#configForm input');
            inputs.forEach(input => {
                input.addEventListener('input', updateJsonPreview);
            });
        });

        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alertId = 'alert-' + Date.now();
            
            const alert = document.createElement('div');
            alert.id = alertId;
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            alertContainer.appendChild(alert);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                const alertElement = document.getElementById(alertId);
                if (alertElement) {
                    alertElement.remove();
                }
            }, 5000);
        }

        function updateJsonPreview() {
            const form = new FormData(document.getElementById('configForm'));
            const config = {};
            
            for (let [key, value] of form.entries()) {
                config[key] = value;
            }
            
            document.getElementById('jsonPreview').textContent = JSON.stringify(config, null, 2);
        }

        async function loadConfig() {
            try {
                const response = await fetch('/config/env');
                if (response.ok) {
                    const config = await response.json();
                    
                    // Fill form with loaded config
                    Object.keys(config).forEach(key => {
                        const input = document.getElementById(key);
                        if (input) {
                            input.value = config[key] || '';
                        }
                    });
                    
                    updateJsonPreview();
                    showAlert('Tải cấu hình thành công!', 'success');
                } else {
                    throw new Error('Không thể tải cấu hình');
                }
            } catch (error) {
                console.error('Error loading config:', error);
                showAlert('Lỗi khi tải cấu hình: ' + error.message, 'danger');
            }
        }

        async function saveConfig() {
            try {
                const form = new FormData(document.getElementById('configForm'));
                const config = {};
                
                for (let [key, value] of form.entries()) {
                    config[key] = value;
                }
                
                const response = await fetch('/config/env', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(config)
                });
                
                if (response.ok) {
                    showAlert('Lưu cấu hình thành công!', 'success');
                } else {
                    throw new Error('Không thể lưu cấu hình');
                }
            } catch (error) {
                console.error('Error saving config:', error);
                showAlert('Lỗi khi lưu cấu hình: ' + error.message, 'danger');
            }
        }

        async function resetConfig() {
            if (confirm('Bạn có chắc chắn muốn khôi phục cấu hình về mặc định?')) {
                try {
                    const response = await fetch('/config/env/reset', {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        await loadConfig();
                        showAlert('Khôi phục cấu hình mặc định thành công!', 'success');
                    } else {
                        throw new Error('Không thể khôi phục cấu hình');
                    }
                } catch (error) {
                    console.error('Error resetting config:', error);
                    showAlert('Lỗi khi khôi phục cấu hình: ' + error.message, 'danger');
                }
            }
        }
    </script>
</body>
</html>